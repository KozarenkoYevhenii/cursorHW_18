{"version":3,"sources":["Components/SignIn/SignIn.js","Components/SignUp/SignUp.js","App.js","serviceWorker.js","index.js"],"names":["SignIn","state","email","password","rememberMe","saveInput","e","setState","target","name","value","rememberMeToggle","checked","onSubmit","console","log","alert","className","src","alt","type","placeholder","onChange","this","onClick","to","React","Component","SignUp","firstName","lastName","subscribe","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.89611f5c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./SignIn.css\";\r\n\r\nclass SignIn extends React.Component {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    rememberMe: false,\r\n  };\r\n  saveInput = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  rememberMeToggle = (e) => {\r\n    this.setState({ [e.target.name]: e.target.checked });\r\n  };\r\n  onSubmit = () => {\r\n    console.log(this.state);\r\n    alert(\"Check console\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"main-wrapper\">\r\n        <div className=\"lock-icon\">\r\n          <img\r\n            src=\"https://www.flaticon.com/svg/static/icons/svg/565/565547.svg\"\r\n            alt=\"lock\"\r\n          />\r\n          <div className=\"form-name\">Sign in</div>\r\n        </div>\r\n        <div className=\"input-fields\">\r\n          <input\r\n            name=\"email\"\r\n            className=\"input-text\"\r\n            type=\"email\"\r\n            placeholder=\"Email Address*\"\r\n            onChange={this.saveInput}\r\n          ></input>\r\n          <input\r\n            name=\"password\"\r\n            className=\"input-text\"\r\n            type=\"pasword\"\r\n            placeholder=\"Password*\"\r\n            onChange={this.saveInput}\r\n          ></input>\r\n          <label>\r\n            <input\r\n              name=\"rememberMe\"\r\n              type=\"checkbox\"\r\n              onChange={this.rememberMeToggle}\r\n            ></input>\r\n            Remember me\r\n          </label>\r\n        </div>\r\n        <button type=\"submit\" onClick={this.onSubmit}>\r\n          SIGN IN\r\n        </button>\r\n        <div className=\"links\">\r\n          <NavLink to=\"#\">Forgot password?</NavLink>\r\n          <NavLink to=\"/signUp\">Don`t have an account? Sign Up</NavLink>\r\n        </div>\r\n        <div className=\"footer\">Copyright © Your Website 2020</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignIn;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./SignUp.css\";\r\n\r\nclass SignUp extends React.Component {\r\n  state = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    subscribe: false,\r\n  };\r\n  saveInput = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  rememberMeToggle = (e) => {\r\n    this.setState({ [e.target.name]: e.target.checked });\r\n  };\r\n  onSubmit = () => {\r\n    console.log(this.state);\r\n    alert(\"Check console\");\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"main-wrapper__signUp\">\r\n        <div className=\"lock-icon\">\r\n          <img\r\n            src=\"https://www.flaticon.com/svg/static/icons/svg/565/565547.svg\"\r\n            alt=\"lock\"\r\n          />\r\n          <div className=\"form-name\">Sign up</div>\r\n        </div>\r\n        <div className=\"input-fields\">\r\n          <div className=\"name\">\r\n            <input\r\n              name=\"firstName\"\r\n              className=\"input-text\"\r\n              type=\"text\"\r\n              placeholder=\"First Name*\"\r\n              onChange={this.saveInput}\r\n            ></input>\r\n            <input\r\n              name=\"lastName\"\r\n              className=\"input-text\"\r\n              type=\"text\"\r\n              placeholder=\"Last Name*\"\r\n              onChange={this.saveInput}\r\n            ></input>\r\n          </div>\r\n          <input\r\n            name=\"email\"\r\n            className=\"input-text\"\r\n            type=\"email\"\r\n            placeholder=\"Email Address*\"\r\n            onChange={this.saveInput}\r\n          ></input>\r\n          <input\r\n            name=\"password\"\r\n            className=\"input-text\"\r\n            type=\"pasword\"\r\n            placeholder=\"Password*\"\r\n            onChange={this.saveInput}\r\n          ></input>\r\n          <label>\r\n            <input\r\n              name=\"subscribe\"\r\n              type=\"checkbox\"\r\n              onChange={this.rememberMeToggle}\r\n            ></input>\r\n            I want to receive inspiration, marketing promotions and updates via\r\n            email.\r\n          </label>\r\n        </div>\r\n        <button type=\"submit\" onClick={this.onSubmit}>\r\n          SIGN UP\r\n        </button>\r\n        <div className=\"link-to-signIn\">\r\n          <NavLink to=\"/signIn\">Already have an account? Sign In</NavLink>\r\n        </div>\r\n        <div className=\"footer\">Copyright © Your Website 2020</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SignUp;\r\n","import React from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport SignIn from './Components/SignIn/SignIn';\nimport SignUp from './Components/SignUp/SignUp';\n\nfunction App() {\n  return (\n    <div>\n      <Redirect exact path=\"/\" to=\"/signIn\" />\n      <Route path=\"/signIn\" component={SignIn} />\n      <Route path=\"/signUp\" component={SignUp} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}